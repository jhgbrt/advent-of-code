namespace AdventOfCode.Tests;

public class PixelFontDecoderTests
{
    ITestOutputHelper _output;

    public PixelFontDecoderTests(ITestOutputHelper output)
    {
        _output = output;
    }
    const string Alphabet = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
    const string Alphabet6x10 = """
        ..##...#####...####..#####..######.######..#####.#....#.#####.....###.#....#.#......#....#.#....#..####..#####...####..#####...####..######.#....#.#....#.#....#.#....#.#....#.######.
        .#..#..#....#.#....#.#....#.#......#......#......#....#...#........#..#...#..#......##..##.#....#.#....#.#....#.#....#.#....#.#........#....#....#.#....#.#....#.#....#.#....#......#.
        #....#.#....#.#......#....#.#......#......#......#....#...#........#..#..#...#......#.##.#.##...#.#....#.#....#.#....#.#....#.#........#....#....#.#....#.#....#..#..#...#..#.......#.
        #....#.#....#.#......#....#.#......#......#......#....#...#........#..#.#....#......#....#.##...#.#....#.#....#.#....#.#....#.#........#....#....#.#....#.#....#..#..#...#..#......#..
        #....#.#####..#......#....#.#####..#####..#......######...#........#..##.....#......#....#.#.#..#.#....#.#####..#....#.#####...####....#....#....#..#..#..#....#...##.....##......#...
        ######.#....#.#......#....#.#......#......#..###.#....#...#........#..##.....#......#....#.#..#.#.#....#.#......#....#.#..#........#...#....#....#..#..#..#....#...##......#.....#....
        #....#.#....#.#......#....#.#......#......#....#.#....#...#........#..#.#....#......#....#.#...##.#....#.#......#....#.#...#.......#...#....#....#..#..#..#....#..#..#.....#....#.....
        #....#.#....#.#......#....#.#......#......#....#.#....#...#....#...#..#..#...#......#....#.#...##.#....#.#......#....#.#...#.......#...#....#....#..#..#..#.##.#..#..#.....#...#......
        #....#.#....#.#....#.#....#.#......#......#....#.#....#...#....#...#..#...#..#......#....#.#....#.#....#.#......#...#..#....#......#...#....#....#...##...##..##.#....#....#...#......
        #....#.#####...####..#####..######.#.......####..#....#.#####...###...#....#.######.#....#.#....#..####..#.......###.#.#....#.#####....#.....####....##...#....#.#....#...#....######.
        """;
    const string Alphabet4x6 = """
        .##..###...##..###..####.####..##..#..#.###....##.#..#.#....#..#.#..#..##..###...##..###...###.####.#..#.#..#.#..#.#..#.#..#.####.
        #..#.#..#.#..#.#..#.#....#....#..#.#..#..#......#.#.#..#....####.##.#.#..#.#..#.#..#.#..#.#.....#...#..#.#..#.#..#.#..#.#..#....#.
        #..#.###..#....#..#.###..###..#....####..#......#.##...#....#..#.##.#.#..#.#..#.#..#.#..#.#.....#...#..#.#..#.#..#..##...##....#..
        ####.#..#.#....#..#.#....#....#.##.#..#..#......#.##...#....#..#.#.##.#..#.###..#..#.###...##...#...#..#..##..#..#.#..#...#...#...
        #..#.#..#.#..#.#..#.#....#....#..#.#..#..#...#..#.#.#..#....#..#.#.##.#..#.#....#.##.#.#.....#..#...#..#..##..####.#..#...#..#....
        #..#.###...##..###..####.#.....###.#..#.###...##..#..#.####.#..#.#..#..##..#.....###.#..#.###...#....##...##..#..#.#..#..#...####.
        """;
    [Theory]
    [InlineData(Alphabet6x10, Alphabet, PixelFontSize._6x10)]
    [InlineData(Alphabet4x6, Alphabet, PixelFontSize._4x6)]
    public void Test(string input, string expected, PixelFontSize size)
    {
        Assert.Equal(expected, input.DecodePixels(size));
    }
    [Fact]
    public void WriteEncodedAndFlattenedLetters()
    {
        _output.WriteLine(Alphabet.Encode(PixelFontSize._4x6));
        _output.WriteLine(Alphabet.Encode(PixelFontSize._6x10));

        foreach (var line in PixelFontDecoder.FlattenLetters(Alphabet4x6, PixelFontSize._4x6))
            _output.WriteLine($"{line}");

        _output.WriteLine(Environment.NewLine);

        foreach (var line in PixelFontDecoder.FlattenLetters(Alphabet6x10, PixelFontSize._6x10))
            _output.WriteLine($"{line}");
    }
}